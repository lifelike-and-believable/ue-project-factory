name: Orchestrate New UE Plugin Repo

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "New repository name (e.g., ue-foo-plugin)"
        required: true
      plugin_name:
        description: "UE Plugin Name (e.g., Foo)"
        required: true
      description:
        description: "Repo description"
        required: false
      private:
        description: "Create as private?"
        type: boolean
        default: true

permissions:
  contents: write
  actions: write
  administration: write
  issues: write

jobs:
  create-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Get App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          installation-id: ${{ secrets.INSTALLATION_ID }}

      - name: Create repo from template
        env:
          TOKEN: ${{ steps.app-token.outputs.token }}
          ORG: ${{ github.repository_owner }}
          TEMPLATE: ue-plugin-template
          REPO: ${{ github.event.inputs.repo_name }}
          DESC: ${{ github.event.inputs.description }}
          PRIVATE: ${{ github.event.inputs.private }}
        run: |
          curl -sSL -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${ORG}/${TEMPLATE}/generate \
            -d "{\"owner\":\"${ORG}\",\"name\":\"${REPO}\",\"private\":${PRIVATE},\"description\":\"${DESC}\"}"

      - name: Wait for new repo
        env:
          TOKEN: ${{ steps.app-token.outputs.token }}
          ORG: ${{ github.repository_owner }}
          REPO: ${{ github.event.inputs.repo_name }}
        run: |
          for i in {1..10}; do
            curl -fsS -H "Authorization: Bearer $TOKEN" \
              https://api.github.com/repos/${ORG}/${REPO} && exit 0
            sleep 2
          done
          exit 1

      - name: Set repo variables (UE paths)
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          ORG: ${{ github.repository_owner }}
          REPO: ${{ github.event.inputs.repo_name }}
          UE_ROOT: ${{ vars.UE_ROOT }}
          UE_PROJECT_REL: ${{ vars.UE_PROJECT_REL }}
          VISUAL_STUDIO_VERSION: ${{ vars.VISUAL_STUDIO_VERSION }}
        run: |
          gh api -X POST repos/${ORG}/${REPO}/actions/variables -f name=UE_ROOT -f value="${UE_ROOT}"
          gh api -X POST repos/${ORG}/${REPO}/actions/variables -f name=UE_PROJECT_REL -f value="${UE_PROJECT_REL}"
          gh api -X POST repos/${ORG}/${REPO}/actions/variables -f name=VISUAL_STUDIO_VERSION -f value="${VISUAL_STUDIO_VERSION}"

      - name: Kick bootstrap in child repo
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          ORG: ${{ github.repository_owner }}
          REPO: ${{ github.event.inputs.repo_name }}
          PLUGIN_NAME: ${{ github.event.inputs.plugin_name }}
        run: |
          gh workflow run 10_bootstrap.yml --repo ${ORG}/${REPO} -f plugin_name="${PLUGIN_NAME}"
