name: New UE Plugin Project
'on':
  workflow_dispatch:
    inputs:
      org:
        description: GitHub org or user
        required: true
        default: lifelike-and-believable
      template_repo:
        description: Template repo (org/name)
        required: true
        default: lifelike-and-believable/ue-plugin-template
      visibility:
        description: private|public|internal
        required: true
        default: private
      repo_name:
        description: Optional explicit repo name
        required: false
      requirements_file:
        description: 'Path to requirements file in factory repo (e.g., specs/my-plugin.md) - takes precedence over requirements field'
      plugin_name:
        description: 'Optional plugin name (if blank, Copilot will choose)'
        required: false
      requirements:
        description: 'Freeform requirements prompt (used if requirements_file is not provided)'
        required: false
jobs:
  factory:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          if ! command -v gh >/dev/null; then
            type -p curl >/dev/null && curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/gi[...]
            sudo apt update && sudo apt install gh -y
          fi
      - name: Authenticate gh
        env:
          GH_TOKEN: ${{ secrets.FACTORY_ADMIN_TOKEN }}
        run: gh auth status
      - name: Load requirements
        id: load_req
        run: |
          if [ -n "${{ inputs.requirements_file }}" ]; then
            if [ ! -f "${{ inputs.requirements_file }}" ]; then
              echo "Error: Requirements file '${{ inputs.requirements_file }}' not found"
              exit 1
            fi
            REQ=$(cat "${{ inputs.requirements_file }}")
            echo "Loaded requirements from file: ${{ inputs.requirements_file }}"
          else
            REQ="${{ inputs.requirements }}"
            if [ -z "$REQ" ]; then
              echo "Warning: No requirements provided. Parser will use defaults (AutoPlugin, UE 5.6)"
            else
              echo "Using inline requirements"
            fi
          fi
          # Use heredoc to safely handle multiline content
          echo "requirements<<EOF" >> $GITHUB_OUTPUT
          echo "$REQ" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Parse requirements
        id: parse
        env:
          REQ: ${{ steps.load_req.outputs.requirements }}
          PLUGIN_NAME: ${{ inputs.plugin_name }}
        run: |
          python3 scripts/parser.py > spec.json
          echo "plugin_name=$(jq -r .plugin_name spec.json)" >> $GITHUB_OUTPUT
          echo "ue_version=$(jq -r .ue_version spec.json)" >> $GITHUB_OUTPUT
          
      - name: Create repository from template
        env:
          GH_TOKEN: ${{ secrets.FACTORY_ADMIN_TOKEN }}
        run: |
          PLUGIN="${{ steps.parse.outputs.plugin_name }}"
          REPO_NAME="${{ inputs.repo_name }}"
          
          if [ -z "$REPO_NAME" ]; then
            SLUG=$(echo "$PLUGIN" | tr "[:upper:]" "[:lower:]")
            REPO_NAME="ue-$SLUG"
          fi
          
          echo "Creating repository ${{ inputs.org }}/$REPO_NAME from template ${{ inputs.template_repo }}"
          gh repo create "${{ inputs.org }}/$REPO_NAME" \
            --${{ inputs.visibility }} \
            --template "${{ inputs.template_repo }}"
          
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          
      - name: Add FACTORY_ADMIN_TOKEN secret to new repo
        env:
          GH_TOKEN: ${{ secrets.FACTORY_ADMIN_TOKEN }}
        run: |
          echo "Adding FACTORY_ADMIN_TOKEN secret to new repository..."
          
          # Add the secret to the newly created repo using gh CLI
          echo "${{ secrets.FACTORY_ADMIN_TOKEN }}" | gh secret set FACTORY_ADMIN_TOKEN \
            --repo "${{ inputs.org }}/$REPO_NAME" \
            --body -
          
          echo "âœ“ Secret added successfully to ${{ inputs.org }}/$REPO_NAME"
          
      - name: Create issue and assign to Copilot Agent
        env:
          GH_TOKEN: ${{ secrets.FACTORY_ADMIN_TOKEN }}
        run: |
          PLUGIN="${{ steps.parse.outputs.plugin_name }}"
          UE_VERSION="${{ steps.parse.outputs.ue_version }}"
          REQUIREMENTS="${{ steps.load_req.outputs.requirements }}"
          
          # Construct the problem statement for Copilot Agent using envsubst for safe variable substitution
          export PLUGIN UE_VERSION REQUIREMENTS
          
          if [ "$PLUGIN" = "TBD" ]; then
            cat > issue_body.md << 'EOF'
          # Implement Unreal Engine Plugin
          
          ## Requirements
          ${REQUIREMENTS}
          
          ## Technical Context
          - Unreal Engine Version: ${UE_VERSION}
          - Target Platforms: Win64
          - Template Structure: This repo was created from ue-plugin-template
          
          ## Tasks
          0. **Choose an appropriate plugin name** based on the requirements above. The name should:
             - Follow Unreal Engine naming conventions (PascalCase, no spaces)
             - Be descriptive of the plugin's purpose
             - Not conflict with common UE plugin names
          
          1. **Run the rename script** with your chosen name:
             ```
             pwsh Build/Scripts/Rename-Plugin.ps1 -NewPluginName "YourChosenName" -UEVersion "${UE_VERSION}"
             ```
             This script will handle all the mechanical renaming of directories, files, and code references.
          
          2. Implement the plugin functionality based on the requirements above
          
          3. Ensure all tests in `Source/<YourPluginName>Tests/` are updated and pass
          
          4. Update README.md with plugin-specific documentation
          
          ## Build & Test
          The repo has a `pr-ci.yml` workflow that will automatically:
          - Build the plugin using UAT
          - Run automation tests
          - Upload artifacts
          
          Please ensure your implementation will build and pass tests on Windows with UE ${UE_VERSION} installed at `C:\Program Files\Epic Games\UE_${UE_VERSION}`.
          EOF
          else
            cat > issue_body.md << 'EOF'
          # Implement Unreal Engine Plugin: ${PLUGIN}
          
          ## Requirements
          ${REQUIREMENTS}
          
          ## Technical Context
          - Unreal Engine Version: ${UE_VERSION}
          - Target Platforms: Win64
          - Template Structure: This repo was created from ue-plugin-template
          
          ## Tasks
          1. **Run the rename script first:**
             ```
             pwsh Build/Scripts/Rename-Plugin.ps1 -NewPluginName "${PLUGIN}" -UEVersion "${UE_VERSION}"
             ```
             This script will handle all the mechanical renaming of directories, files, and code references from `SamplePlugin` to `${PLUGIN}`.
          
          2. Implement the plugin functionality based on the requirements above
          
          3. Ensure all tests in `Source/${PLUGIN}Tests/` are updated and pass
          
          4. Update README.md with plugin-specific documentation
          
          ## Build & Test
          The repo has a `pr-ci.yml` workflow that will automatically:
          - Build the plugin using UAT
          - Run automation tests
          - Upload artifacts
          
          Please ensure your implementation will build and pass tests on Windows with UE ${UE_VERSION} installed at `C:\Program Files\Epic Games\UE_${UE_VERSION}`.
          EOF
          fi
          
          # Use envsubst for safe variable substitution
          envsubst < issue_body.md > issue_body_final.md
          mv issue_body_final.md issue_body.md
          
          # Create the issue and assign to @copilot
          echo "Creating issue in ${{ inputs.org }}/$REPO_NAME"
          gh issue create \
            --repo "${{ inputs.org }}/$REPO_NAME" \
            --title "Initialize $PLUGIN plugin" \
            --body-file issue_body.md \
            --assignee @copilot
